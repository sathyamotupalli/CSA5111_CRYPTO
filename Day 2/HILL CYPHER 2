#include <stdio.h>

// Function to compute the modular inverse of a number 'a' modulo 'm'
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Modular inverse does not exist
}

// Function to decrypt a message using the known plaintext-ciphertext pair
void decryptKnownPair(int plaintext[2], int ciphertext[2], int key[2][2]) {
    int determinant = (key[0][0] * key[1][1] - key[0][1] * key[1][0] + 26) % 26;
    int inverse_determinant = modInverse(determinant, 26);
    
    int adj_key[2][2];
    adj_key[0][0] = key[1][1];
    adj_key[0][1] = -key[0][1];
    adj_key[1][0] = -key[1][0];
    adj_key[1][1] = key[0][0];

    // Compute the modular inverse of the determinant
    if (determinant == 0 || inverse_determinant == -1) {
        printf("Modular inverse does not exist. Unable to decrypt.\n");
        return;
    }

    // Calculate the key matrix inverse
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            adj_key[i][j] = (adj_key[i][j] + 26) % 26;
            adj_key[i][j] = (adj_key[i][j] * inverse_determinant) % 26;
        }
    }

    // Calculate the plaintext using the inverse key
    int decrypted[2];
    decrypted[0] = (adj_key[0][0] * ciphertext[0] + adj_key[0][1] * ciphertext[1]) % 26;
    decrypted[1] = (adj_key[1][0] * ciphertext[0] + adj_key[1][1] * ciphertext[1]) % 26;

    printf("Decrypted message: %c%c\n", decrypted[0] + 'A', decrypted[1] + 'A');
}

int main() {
    int plaintext[2], ciphertext[2];
    int key[2][2];
    
    printf("Enter the known plaintext (2 uppercase letters): ");
    scanf(" %c %c", &plaintext[0], &plaintext[1]);

    printf("Enter the corresponding ciphertext (2 uppercase letters): ");
    scanf(" %c %c", &ciphertext[0], &ciphertext[1]);

    // Convert characters to numbers (A=0, B=1, ..., Z=25)
    plaintext[0] -= 'A';
    plaintext[1] -= 'A';
    ciphertext[0] -= 'A';
    ciphertext[1] -= 'A';

    // Decrypt the message using the known plaintext-ciphertext pair
    decryptKnownPair(plaintext, ciphertext, key);

    return 0;
}
