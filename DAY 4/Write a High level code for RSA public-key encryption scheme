from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization

# Generate a new RSA key pair
private_key = rsa.generate_private_key(
    public_exponent=65537,  # Common value for e in practice
    key_size=2048,  # Choose an appropriate key size
)

# Serialize the private key to store securely
private_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()  # No encryption for private key
)

# Extract the public key from the private key
public_key = private_key.public_key()

# Serialize the public key for distribution
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Store the new private key and distribute the new public key
# You should save private_pem securely and distribute public_pem.

# Example: Save the private key to a file
with open('new_private_key.pem', 'wb') as private_key_file:
    private_key_file.write(private_pem)

# Example: Save the public key to a file
with open('new_public_key.pem', 'wb') as public_key_file:
    public_key_file.write(public_pem)

# Bob should keep the new private key secure and distribute the new public key.
