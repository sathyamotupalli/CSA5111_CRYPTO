# S-DES S-boxes
s0 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]]
s1 = [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]]

# Initial permutation
ip = [1, 5, 2, 0, 3, 7, 4, 6]

# Final permutation
fp = [3, 0, 2, 4, 6, 1, 7, 5]

# Expand and permute function
ep = [3, 0, 1, 2, 1, 2, 3, 0]

# P4 permutation
p4 = [1, 3, 2, 0]

# P8 permutation
p8 = [5, 2, 6, 3, 7, 4, 9, 8]

# Initial permutation for 4 bits
ip4 = [1, 3, 2, 0]

# XOR operation on bit strings
def xor(a, b):
    return "".join(str(int(x) ^ int(y)) for x, y in zip(a, b))

# Permute a bit string according to a permutation list
def permute(bit_string, permutation):
    return "".join(bit_string[i] for i in permutation)

# S-DES key generation
def generate_round_keys(key):
    key = permute(key, p8)
    k1 = key[:4]
    k2 = key[4:]
    k1 = permute(k1, ip4)
    k2 = permute(k2, ip4)
    return k1, k2

# S-DES S-box substitution
def sbox_substitution(bits, sbox):
    row = int(bits[0] + bits[3], 2)
    col = int(bits[1] + bits[2], 2)
    return format(sbox[row][col], '02b')

# S-DES Fk function
def fk(bits, key):
    left, right = bits[:4], bits[4:]
    right_expanded = permute(right, ep)
    right_xor_key = xor(right_expanded, key)
    right_sbox0 = sbox_substitution(right_xor_key[:4], s0)
    right_sbox1 = sbox_substitution(right_xor_key[4:], s1)
    right_permuted = permute(right_sbox0 + right_sbox1, p4)
    left = xor(left, right_permuted)
    return left + bits[:4]

# S-DES round function
def round(bits, key):
    left, right = bits[:4], bits[4:]
    f_result = fk(right, key)
    left = xor(left, f_result)
    return right + left

# S-DES encryption
def sdes_encrypt(plaintext, key):
    key1, key2 = generate_round_keys(key)
    plaintext = permute(plaintext, ip)
    for _ in range(2):
        plaintext = round(plaintext, key1)
        plaintext = round(plaintext, key2)
    ciphertext = permute(plaintext, fp)
    return ciphertext

# S-DES decryption
def sdes_decrypt(ciphertext, key):
    key1, key2 = generate_round_keys(key)
    ciphertext = permute(ciphertext, ip)
    key2 = permute(key2, ip4)
    key1 = permute(key1, ip4)
    for _ in range(2):
        ciphertext = round(ciphertext, key2)
        ciphertext = round(ciphertext, key1)
    plaintext = permute(ciphertext, fp)
    return plaintext

# Test data
plaintext = "0000000100100011"
key = "0111111101"
iv = "10101010"

# Encrypt
plaintext_xor_iv = xor(plaintext, iv)
ciphertext = sdes_encrypt(plaintext_xor_iv, key)

print("Plaintext:", plaintext)
print("Key:", key)
print("IV:", iv)
print("Ciphertext:", ciphertext)

# Decrypt
decrypted_ciphertext_xor_iv = sdes_decrypt(ciphertext, key)
plaintext_decrypted = xor(decrypted_ciphertext_xor_iv, iv)

print("Decrypted Ciphertext:", decrypted_ciphertext_xor_iv)
print("Decrypted Plaintext:", plaintext_decrypted)
