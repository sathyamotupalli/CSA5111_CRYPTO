#include <stdio.h>
#include <math.h>

// Prime number and primitive root modulo prime
#define P 23
#define G 5

// Function to calculate (base^exponent) % modulus
int mod_pow(int base, int exponent, int modulus) {
    int result = 1;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % modulus;
        }
        base = (base * base) % modulus;
        exponent /= 2;
    }
    return result;
}

int main() {
    // Private keys
    int a_private = 6; // Alice's private key
    int b_private = 15; // Bob's private key

    // Compute public values
    int a_public = mod_pow(G, a_private, P);
    int b_public = mod_pow(G, b_private, P);

    // Exchange public values

    // Compute shared secret keys
    int alice_shared_secret = mod_pow(b_public, a_private, P);
    int bob_shared_secret = mod_pow(a_public, b_private, P);

    printf("Alice's Private Key: %d\n", a_private);
    printf("Bob's Private Key: %d\n", b_private);
    printf("Alice's Public Value: %d\n", a_public);
    printf("Bob's Public Value: %d\n", b_public);
    printf("Shared Secret Key (Alice's side): %d\n", alice_shared_secret);
    printf("Shared Secret Key (Bob's side): %d\n", bob_shared_secret);

    return 0;
}
