#include <stdio.h>
#include <string.h>

// Function to prepare the key matrix
void prepareKeyMatrix(char key[], char keyMatrix[5][5]) {
    int keyLength = strlen(key);
    int alphabet[26] = {0};
    int i, j, k;

    for (i = 0, j = 0, k = 0; k < keyLength; k++) {
        if (alphabet[key[k] - 'A'] == 0) {
            keyMatrix[i][j] = key[k];
            alphabet[key[k] - 'A'] = 1;
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }

    for (k = 0; k < 26; k++) {
        if (alphabet[k] == 0 && k != ('J' - 'A')) {
            keyMatrix[i][j] = 'A' + k;
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
}

// Function to find the positions of two characters in the key matrix
void findPositions(char keyMatrix[5][5], char a, char b, int *rowA, int *colA, int *rowB, int *colB) {
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (keyMatrix[i][j] == a) {
                *rowA = i;
                *colA = j;
            }
            if (keyMatrix[i][j] == b) {
                *rowB = i;
                *colB = j;
            }
        }
    }
}

// Function to perform Playfair cipher encryption
void playfairEncrypt(char key[], char plaintext[]) {
    char keyMatrix[5][5];
    prepareKeyMatrix(key, keyMatrix);

    int len = strlen(plaintext);
    int i, j;
    char encryptedText[100];
    int k = 0;

    for (i = 0; i < len; i += 2) {
        char a = plaintext[i];
        char b = (i + 1 < len) ? plaintext[i + 1] : 'X'; // Add 'X' for odd-length plaintext

        int rowA, colA, rowB, colB;
        findPositions(keyMatrix, a, b, &rowA, &colA, &rowB, &colB);

        if (rowA == rowB) { // Same row
            encryptedText[k++] = keyMatrix[rowA][(colA + 1) % 5];
            encryptedText[k++] = keyMatrix[rowB][(colB + 1) % 5];
        } else if (colA == colB) { // Same column
            encryptedText[k++] = keyMatrix[(rowA + 1) % 5][colA];
            encryptedText[k++] = keyMatrix[(rowB + 1) % 5][colB];
        } else { // Different row and column
            encryptedText[k++] = keyMatrix[rowA][colB];
            encryptedText[k++] = keyMatrix[rowB][colA];
        }
    }

    encryptedText[k] = '\0';

    printf("Encrypted text: %s\n", encryptedText);
}

int main() {
    char key[] = "KEYWORD";
    char plaintext[] = "HELLO";

    playfairEncrypt(key, plaintext);

    return 0;
}
